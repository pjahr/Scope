<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:Scope.Views.Converters">

  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill"
      Color="#FF595959" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke"
      Color="#FF262626" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke"
      Color="#FF27C7F7" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.MouseOver.Fill"
      Color="#FFCCEEFB" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke"
      Color="#FF1CC4F7" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill"
      Color="#FF82DFFB" />
  <PathGeometry
      x:Key="TreeArrow"
      Figures="M0,0 L0,6 L6,0 z" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.Static.Fill"
      Color="#FFFFFFFF" />
  <SolidColorBrush
      x:Key="TreeViewItem.TreeArrow.Static.Stroke"
      Color="#FF818181" />

  <c:VisibleOrHidden x:Key="VisibleOrHidden"/>
  <c:HiddenOrVisible x:Key="HiddenOrVisible"/>

  <Style
      x:Key="TreeViewItemFocusVisual">
    <Setter
        Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
      x:Key="ExpandCollapseToggleStyle"
      TargetType="{x:Type ToggleButton}">

    <Setter
        Property="Focusable"
        Value="False" />
    <Setter
        Property="Width"
        Value="16" />
    <Setter
        Property="Height"
        Value="16" />
    <Setter
        Property="Template">
      <Setter.Value>
        <ControlTemplate
            TargetType="{x:Type ToggleButton}">
          <Border
              Background="Transparent"
              Height="16"
              Padding="5,5,5,5"
              Width="16">
            <Path
                x:Name="ExpandPath"
                Data="{StaticResource TreeArrow}"
                Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
                Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
              <Path.RenderTransform>
                <RotateTransform
                    Angle="135"
                    CenterY="3"
                    CenterX="3" />
              </Path.RenderTransform>
            </Path>
          </Border>

          <ControlTemplate.Triggers>

            <Trigger
                Property="IsChecked"
                Value="True">

              <Setter
                  Property="RenderTransform"
                  TargetName="ExpandPath">
                <Setter.Value>
                  <RotateTransform
                      Angle="180"
                      CenterY="3"
                      CenterX="3" />
                </Setter.Value>
              </Setter>

              <Setter
                  Property="Fill"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
              <Setter
                  Property="Stroke"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
            </Trigger>

            <Trigger
                Property="IsMouseOver"
                Value="True">
              <Setter
                  Property="Stroke"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
              <Setter
                  Property="Fill"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition
                    Property="IsMouseOver"
                    Value="True" />
                <Condition
                    Property="IsChecked"
                    Value="True" />
              </MultiTrigger.Conditions>
              <Setter
                  Property="Stroke"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
              <Setter
                  Property="Fill"
                  TargetName="ExpandPath"
                  Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
            </MultiTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style 
      x:Key="TogglePinnedButton"
      BasedOn="{StaticResource FsTreeViewItemActiveItemActionButton}"
      TargetType="Button">

    <Style.Triggers>

      <MultiDataTrigger>
        <!--show button only when hovered and item is currently selected-->
        <MultiDataTrigger.Conditions>
          <Condition 
              Binding="{Binding
                          RelativeSource={RelativeSource                            
                                          Mode=FindAncestor,
                                          AncestorType=Border},
                          Path=IsMouseOver}"
              Value="True" />

          <Condition
              Binding="{Binding IsSelected}"
              Value="True" />

        </MultiDataTrigger.Conditions>

        <Setter
            Property="Visibility"
            Value="Visible"/>

      </MultiDataTrigger>

    </Style.Triggers>

  </Style>

  <Style 
      x:Key="ExportItemButton"
      BasedOn="{StaticResource FsTreeViewItemActiveItemActionButton}"
      TargetType="Button">
    <Style.Triggers>
      <MultiDataTrigger>
        <!--show only when hovered and item is currently selected-->
        <MultiDataTrigger.Conditions>
          <Condition 
              Binding="{Binding
                         RelativeSource={RelativeSource                            
                                          Mode=FindAncestor,
                                          AncestorType=TreeViewItem},
                         Path=IsMouseOver}"
              Value="True" />

          <Condition
              Binding="{Binding IsSelected}"
              Value="True" />

        </MultiDataTrigger.Conditions>

        <Setter
            Property="Visibility"
            Value="Visible"/>

      </MultiDataTrigger>
    </Style.Triggers>
  </Style>

  <Style
      x:Key="TreeViewItemStyle1"
      TargetType="{x:Type TreeViewItem}">

    <Setter
        Property="Background"
        Value="Transparent" />

    <Setter
        Property="HorizontalContentAlignment"
        Value="{Binding HorizontalContentAlignment,
                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter
        Property="VerticalContentAlignment"
        Value="{Binding VerticalContentAlignment,
                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter
        Property="Padding"
        Value="1,0,0,0" />

    <Setter
        Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

    <Setter
        Property="FocusVisualStyle"
        Value="{StaticResource TreeViewItemFocusVisual}" />

    <Setter
        Property="Template">
      <Setter.Value>
        <!-- The container is displayed with an expander button (+) left of the items name.
             To the right of the name are buttons to select an item for extraction or extract this item immediately.
             Below the name and the action buttons the child items will expand.-->
        <ControlTemplate
            TargetType="{x:Type TreeViewItem}">

          <Grid>

            <Grid.ColumnDefinitions>
              <ColumnDefinition
                  MinWidth="19"
                  Width="Auto" />
              <ColumnDefinition
                  Width="*" />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
              <RowDefinition
                  Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>

            <Grid>

              <ToggleButton
                x:Name="Expander"
                ClickMode="Press"
                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ExpandCollapseToggleStyle}" 
                Visibility="{Binding IsLoadingChildren, Converter={StaticResource HiddenOrVisible}}"/>

              <Border
                x:Name="LoadingChildrenIndicator"
                BorderThickness="2 0 2 0"
                BorderBrush="Gray"
                Visibility="{Binding IsLoadingChildren, Converter={StaticResource VisibleOrHidden}}"
                Width="10"
                Height="2"
                RenderTransformOrigin="0.5 0.5">
                <Border.RenderTransform>
                  <RotateTransform x:Name="MyAnimatedTransform"
                                   Angle="0"/>
                </Border.RenderTransform>
                <Border.Triggers>

                  <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>

                      <Storyboard>

                        <DoubleAnimation
                                Storyboard.TargetName="MyAnimatedTransform"
                                Storyboard.TargetProperty="(RotateTransform.Angle)"
                                To="-360"
                                Duration="0:0:0.5"
                                RepeatBehavior="Forever"/>

                      </Storyboard>

                    </BeginStoryboard>
                  </EventTrigger>
                </Border.Triggers>
              </Border>
            </Grid>

            <Border
                x:Name="Bd"
                Grid.Column="1"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="true">

              <DockPanel>

                <Button
                    Command="{Binding
                               RelativeSource={RelativeSource
                                                Mode=FindAncestor,
                                                AncestorType=TreeView},
                               Path=DataContext.ExtractCommand}"
                    CommandParameter="{Binding}"
                    Style="{StaticResource FsTreeViewItemActiveItemActionButton}"
                    DockPanel.Dock="Right">

                  <Path
                      Data="{StaticResource Extract}"
                      Style="{StaticResource ActionIcon}"/>

                  <Button.ToolTip>Extract this item</Button.ToolTip>

                </Button>

                <Button
                    Command="{Binding
                               RelativeSource={RelativeSource
                                                Mode=FindAncestor,
                                                AncestorType=TreeView},
                               Path=DataContext.ToggleSelectionOfCurrentItemCommand}"
                    CommandParameter="{Binding}"
                    DockPanel.Dock="Right"
                    Style="{StaticResource FsTreeViewItemActiveItemActionButton}">

                  <Path
                      Data="{StaticResource Pin}"
                      Style="{StaticResource ActionIcon}"/>

                  <Button.ToolTip>Pin this item</Button.ToolTip>

                </Button>

                <ContentPresenter
                    x:Name="PART_Header"
                    ContentSource="Header"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

              </DockPanel>

            </Border>

            <ItemsPresenter
                x:Name="ItemsHost"
                Grid.Row="1"
                Grid.Column="1" />

          </Grid>

          <ControlTemplate.Triggers>

            <!-- collapse ItemsHost when not expanded-->
            <Trigger
                Property="IsExpanded"
                Value="false">
              <Setter
                  Property="Visibility"
                  TargetName="ItemsHost"
                  Value="Collapsed" />
            </Trigger>

            <!-- do not show expander when there are no items -->
            <Trigger
                Property="HasItems"
                Value="False">
              <Setter
                  Property="Visibility"
                  TargetName="Expander"
                  Value="Hidden" />
            </Trigger>


            <!-- highlight background when item is selected -->

            <Trigger
                Property="IsSelected"
                Value="true">
              <Setter
                  Property="Background"
                  TargetName="Bd"
                  Value="{DynamicResource AccentColor}" />
              <Setter
                  Property="Foreground"
                  Value="Black" />
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition
                    Property="IsSelected"
                    Value="true" />
                <Condition
                    Property="IsSelectionActive"
                    Value="false" />
              </MultiTrigger.Conditions>
              <Setter
                  Property="Background"
                  TargetName="Bd"
                  Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
              <Setter
                  Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
            </MultiTrigger>

            <!-- 'gray out' when item is disabled-->
            <Trigger
                Property="IsEnabled"
                Value="false">
              <Setter
                  Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger
          Property="VirtualizingPanel.IsVirtualizing"
          Value="true">
        <Setter
            Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- Source: https://social.msdn.microsoft.com/Forums/vstudio/en-US/f260871d-1318-43fb-abfb-188832e3eedd/treeview-virtualizingstackpanel-problem-with-scrollviewer?forum=wpf -->
  <Style
      x:Key="TreeViewStyle">
    <Setter
        Property="TreeView.Background"
        Value="Transparent" />
    <Setter
        Property="VirtualizingStackPanel.IsVirtualizing"
        Value="True" />
    <Setter
        Property="VirtualizingStackPanel.VirtualizationMode"
        Value="Standard" />
    <!-- changed from 'Recycling' as this led to mixed up items after many different items were traversed.-->
    <Setter
        Property="TreeView.SnapsToDevicePixels"
        Value="True" />
    <Setter
        Property="TreeView.OverridesDefaultStyle"
        Value="True" />
    <Setter
        Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel
              IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>

    <Setter
        Property="TreeView.Template">
      <Setter.Value>

        <ControlTemplate
            TargetType="TreeView">

          <ScrollViewer
              Focusable="False"
              CanContentScroll="True"
              Padding="3">

            <ItemsPresenter
                HorizontalAlignment="Stretch" />
          </ScrollViewer>

        </ControlTemplate>

      </Setter.Value>
    </Setter>

  </Style>

  <Style
    x:Key="SearchResultHighlight"
    TargetType="Run">

    <Setter 
      Property="Background"
      Value="Yellow" />

  </Style>


</ResourceDictionary>